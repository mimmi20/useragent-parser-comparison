#!/usr/bin/env php
<?php

ini_set('memory_limit', -1);
ini_set('max_execution_time', -1);

$benchmarkPos = array_search('--benchmark', $argv);
$benchmark    = false;

if ($benchmarkPos !== false) {
    $benchmark = true;
    unset($argv[$benchmarkPos]);
    $argv = array_values($argv);
}

$agentListFile = $argv[1];

$results   = [];
$parseTime = 0;

$start = microtime(true);
require __DIR__ . '/vendor/autoload.php';
$uaParser = new \UAParser\UAParser();
$uaParser->parse('Test String');
$initTime = microtime(true) - $start;

$file = new SplFileObject($agentListFile);
$file->setFlags(SplFileObject::DROP_NEW_LINE);

while (!$file->eof()) {
    $agentString = $file->fgets();

    if (!empty($agentString)) {
        $start  = microtime(true);
        $result = $uaParser->parse($agentString);
        $end    = microtime(true) - $start;

        if (!$benchmark) {
            $results[] = [
                'useragent' => $agentString,
                'parsed'    => [
                    'browser' => [
                        'name'    => $result->getBrowser()->getFamily(),
                        'version' => $result->getBrowser()->getVersionString(),
                    ],
                    'platform' => [
                        'name'    => $result->getOperatingSystem()->getFamily(),
                        'version' => !empty($r->os['version']) ? $r->os['version'] : '',
                    ],
                    'device' => [
                        'name'     => $result->getDevice()->getModel(),
                        'brand'    => $result->getDevice()->getConstructor(),
                        'type'     => $result->getDevice()->getType(),
                        'ismobile' => $result->getDevice()->isMobile(),
                    ],
                ],
                'time' => $end,
            ];
        }

        $parseTime += $end;
    }
}

$file = null;

$memory = memory_get_peak_usage();

// Get version from composer
$package = new \PackageInfo\Package('yzalis/ua-parser');

print json_encode([
    'results'     => $results,
    'parse_time'  => $parseTime,
    'init_time'   => $initTime,
    'memory_used' => $memory,
    'version'     => $package->getVersion(),
], JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
