#!/usr/bin/env php
<?php

error_reporting(E_ERROR | E_WARNING | E_PARSE);

// Would like to have name/brand for mobile devices, but their test suite doesn't break that out very well
// for the expected values.  Using the device parser class to extract possible device brand names that we
// can use to extract brand/name from the device "title" later. Would be nice to use tokens here rather than
// regex, but a task for another day.

$uas = [];

$base = [
    'browser' => [
        'name'    => null,
        'version' => null,
    ],
    'platform' => [
        'name'    => null,
        'version' => null,
    ],
    'device' => [
        'name'     => null,
        'brand'    => null,
        'type'     => null,
        'ismobile' => null,
    ]
];

foreach (new FilesystemIterator(__DIR__ . '/node_modules/ua-parser-js/test') as $fixture) {
    if (substr($fixture->getFilename(), -3) == 'yml') {
        $providerName = $fixture->getFilename();
        $provider     = Spyc::YAMLLoad($fixture->getPathname());

        foreach ($provider as $data) {
            $ua = $data[0];

            if (!isset($uas[$ua])) {
                $uas[$ua] = $base;
            }

            switch ($providerName) {
                case 'browsers.yml':
                    $uas[$ua]['browser']['name']    = $data[1];
                    $uas[$ua]['browser']['version'] = $data[2] . '.' . $data[3] . '.' . $data[4];
                    break;
                case 'devices.yml':
                    $uas[$ua]['device']['name']  = $data[2];
                    $uas[$ua]['device']['brand'] = $data[1];
                    $uas[$ua]['device']['type']  = $data[3];
                    break;
                case 'operating_systems.yml':
                    $uas[$ua]['platform']['name']    = $data[1];
                    $uas[$ua]['platform']['version'] = $data[2] . (null !== $data[3] ? '.' . $data[3] . (null !== $data[4] ? '.' . $data[4] : '') : '');
                    break;
                // Skipping rendering_engines.yml because we don't look at Engine data
                // Skipping other files because we dont test this
            }
        }
    }
}

// Get version from composer
$package = new \PackageInfo\Package('yzalis/ua-parser');

print json_encode([
    'tests'   => $tests,
    'version' => $package->getVersion(),
], JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
